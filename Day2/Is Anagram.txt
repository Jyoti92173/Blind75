/*
Problem Statement: Given two strings s and t, return true if the two strings are anagrams of each other, otherwise return false.
An anagram is a string that contains the exact same characters as another string, but the order of the characters can be different.
*/
class Solution {
    public boolean isAnagram(String s, String t) {
	Approach 1: Brute Force
    if(s.length()!=t.length()){
        return false;
    }
    int []sCount=new int[26];
    int []tCount=new int[26];
    for(int i=0; i<s.length(); i++){
        sCount[s.charAt(i) - 'a']++;
        tCount[t.charAt(i) - 'a']++;
    }
    for(int i=0; i<26; i++){
        if(sCount[i]!=tCount[i]){
            return false;
        }
    }
    return true;
    }
	//Time Complexity: O(n)
	//Space Complexity: O(1)
	
	Approach 2: Two Pointer with Sorting 
	  if(s.length()!=t.length()){
        return false;
       }
	    char[] sArray = s.toCharArray();
        char[] tArray = t.toCharArray();
        Arrays.sort(sArray);
        Arrays.sort(tArray);
        
        // Step 3: Compare sorted arrays
        return Arrays.equals(sArray, tArray);
		 Time Complexity: O(nlogn)
		 Space Complexity: O(n)
	
}
